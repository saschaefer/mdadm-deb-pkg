# validate the prodigal member disk scenario i.e. a former container
# member is returned after having been rebuilt on another system
num_disks=4
size=$((10*1024))
mdadm -CR $container -e imsm -n $num_disks $dev0 $dev1 $dev2 $dev3
mdadm -CR $member $dev0 $dev2 -n 2 -l 1 -z $size
mdadm --wait $member
mdadm -Ss

# make dev0 and dev1 a new rebuild family
mdadm -A $container $dev0 $dev1
mdadm -I $container
mdadm --wait ${member}_0
mdadm -Ss

# make dev2 and dev3 a new rebuild family
mdadm -A $container $dev2 $dev3
mdadm -I $container
mdadm --wait ${member}_0
mdadm -Ss

# reassemble and make sure one of the families falls out
mdadm -A $container $dev0 $dev1 $dev2 $dev3
mdadm -I $container
testdev ${member}_0 1 $size 1
if mdadm --remove $container $dev0 ; then
    # the dev[23] family won
    imsm_check_removal $container $dev1
    imsm_check_hold $container $dev2
    imsm_check_hold $container $dev3
else
    # the dev[01] family won
    imsm_check_hold $container $dev1
    imsm_check_removal $container $dev2
    imsm_check_removal $container $dev3
fi
mdadm -Ss

# reassemble with a new id for the dev[23] family
mdadm -A $container $dev0 $dev1
mdadm -I $container
mdadm -A ${container}2 $dev2 $dev3 --update=uuid
mdadm -I ${container}2

testdev ${member}_0 1 $size 1
testdev ${member}_1 1 $size 1
